[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"/LICENSE.html","id":"1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"/LICENSE.html","id":"2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"/LICENSE.html","id":"3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"/LICENSE.html","id":"4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"/LICENSE.html","id":"5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"/LICENSE.html","id":"6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"/LICENSE.html","id":"7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"/LICENSE.html","id":"8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"/LICENSE.html","id":"9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dewey Dunnington. Author, maintainer. Apache Arrow. Author, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dunnington D, Apache Arrow (2022). nanoarrow: R Interface 'nanoarrow' C Library. R package version 0.0.0.9000, https://github.com/apache/arrow-nanoarrow.","code":"@Manual{,   title = {nanoarrow: An R Interface to the 'nanoarrow' C Library},   author = {Dewey Dunnington and {Apache Arrow}},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://github.com/apache/arrow-nanoarrow}, }"},{"path":"/index.html","id":"nanoarrow","dir":"","previous_headings":"","what":"An R Interface to the nanoarrow C Library","title":"An R Interface to the nanoarrow C Library","text":"goal nanoarrow provide minimal useful bindings Arrow C Data Arrow C Stream interfaces using nanoarrow C library.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R Interface to the nanoarrow C Library","text":"can install development version nanoarrow GitHub : can load package, ’re good go!","code":"# install.packages(\"remotes\") remotes::install_github(\"apache/arrow-nanoarrow/r\", build = FALSE) library(nanoarrow)"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"An R Interface to the nanoarrow C Library","text":"Arrow C Data Arrow C Stream interfaces comprised three structures: ArrowSchema represents data type array, ArrowArray represents values array, ArrowArrayStream, represents zero ArrowArrays common ArrowSchema. three can wrapped R objects using nanoarrow R package.","code":""},{"path":"/index.html","id":"schemas","dir":"","previous_headings":"Example","what":"Schemas","title":"An R Interface to the nanoarrow C Library","text":"Use infer_nanoarrow_schema() get ArrowSchema object corresponds given R vector type; use as_nanoarrow_schema() convert object data type representation (e.g., arrow R package DataType like arrow::int32()).","code":"infer_nanoarrow_schema(1:5) #> <nanoarrow_schema[i]> #>  $ format    : chr \"i\" #>  $ name      : chr \"\" #>  $ metadata  : list() #>  $ flags     : int 2 #>  $ children  : NULL #>  $ dictionary: NULL as_nanoarrow_schema(arrow::schema(col1 = arrow::float64())) #> <nanoarrow_schema[+s]> #>  $ format    : chr \"+s\" #>  $ name      : chr \"\" #>  $ metadata  : list() #>  $ flags     : int 0 #>  $ children  :List of 1 #>   ..$ col1:<nanoarrow_schema[g]> #>   .. ..$ format    : chr \"g\" #>   .. ..$ name      : chr \"col1\" #>   .. ..$ metadata  : list() #>   .. ..$ flags     : int 2 #>   .. ..$ children  : NULL #>   .. ..$ dictionary: NULL #>  $ dictionary: NULL"},{"path":"/index.html","id":"arrays","dir":"","previous_headings":"Example","what":"Arrays","title":"An R Interface to the nanoarrow C Library","text":"Use as_nanoarrow_array() convert object ArrowArray object: can use .vector() .data.frame() get R representation object back: Even though C level ArrowArray distinct ArrowSchema, R level attach schema wherever possible. can access attached schema using infer_nanoarrow_schema():","code":"as_nanoarrow_array(1:5) #> <nanoarrow_array i[5]> #>  $ length    : int 5 #>  $ null_count: int 0 #>  $ offset    : int 0 #>  $ buffers   :List of 2 #>   ..$ :<nanoarrow_buffer_validity[0 b] at 0x0> #>   ..$ :<nanoarrow_buffer_data_int32[20 b] at 0x1397d7758> #>  $ dictionary: NULL #>  $ children  : list() as_nanoarrow_array(arrow::record_batch(col1 = c(1.1, 2.2))) #> <nanoarrow_array +s[2]> #>  $ length    : int 2 #>  $ null_count: int 0 #>  $ offset    : int 0 #>  $ buffers   :List of 1 #>   ..$ :<nanoarrow_buffer_validity[0 b] at 0x0> #>  $ children  :List of 1 #>   ..$ col1:<nanoarrow_array g[2]> #>   .. ..$ length    : int 2 #>   .. ..$ null_count: int 0 #>   .. ..$ offset    : int 0 #>   .. ..$ buffers   :List of 2 #>   .. .. ..$ :<nanoarrow_buffer_validity[0 b] at 0x0> #>   .. .. ..$ :<nanoarrow_buffer_data_double[16 b] at 0x118a4b2b8> #>   .. ..$ dictionary: NULL #>   .. ..$ children  : list() #>  $ dictionary: NULL array <- as_nanoarrow_array(arrow::record_batch(col1 = c(1.1, 2.2))) as.data.frame(array) #>   col1 #> 1  1.1 #> 2  2.2 infer_nanoarrow_schema(array) #> <nanoarrow_schema[+s]> #>  $ format    : chr \"+s\" #>  $ name      : chr \"\" #>  $ metadata  : list() #>  $ flags     : int 0 #>  $ children  :List of 1 #>   ..$ col1:<nanoarrow_schema[g]> #>   .. ..$ format    : chr \"g\" #>   .. ..$ name      : chr \"col1\" #>   .. ..$ metadata  : list() #>   .. ..$ flags     : int 2 #>   .. ..$ children  : NULL #>   .. ..$ dictionary: NULL #>  $ dictionary: NULL"},{"path":"/index.html","id":"array-streams","dir":"","previous_headings":"Example","what":"Array Streams","title":"An R Interface to the nanoarrow C Library","text":"easiest way create ArrowArrayStream arrow::RecordBatchReader: can pull batches stream using $get_next() method. last batch return NULL. consuming stream, call release method soon can. lets implementation stream release resources (like open files) may holding predictable way waiting garbage collector clean object.","code":"reader <- arrow::RecordBatchReader$create(   arrow::record_batch(col1 = c(1.1, 2.2)),   arrow::record_batch(col1 = c(3.3, 4.4)) )  (stream <- as_nanoarrow_array_stream(reader)) #> <nanoarrow_array_stream[+s]> #>  $ get_schema:function ()   #>  $ get_next  :function (schema = x$get_schema(), validate = TRUE)   #>  $ release   :function () stream$get_next() #> <nanoarrow_array +s[2]> #>  $ length    : int 2 #>  $ null_count: int 0 #>  $ offset    : int 0 #>  $ buffers   :List of 1 #>   ..$ :<nanoarrow_buffer_validity[0 b] at 0x0> #>  $ children  :List of 1 #>   ..$ col1:<nanoarrow_array g[2]> #>   .. ..$ length    : int 2 #>   .. ..$ null_count: int 0 #>   .. ..$ offset    : int 0 #>   .. ..$ buffers   :List of 2 #>   .. .. ..$ :<nanoarrow_buffer_validity[0 b] at 0x0> #>   .. .. ..$ :<nanoarrow_buffer_data_double[16 b] at 0x1195924b8> #>   .. ..$ dictionary: NULL #>   .. ..$ children  : list() #>  $ dictionary: NULL stream$get_next() #> <nanoarrow_array +s[2]> #>  $ length    : int 2 #>  $ null_count: int 0 #>  $ offset    : int 0 #>  $ buffers   :List of 1 #>   ..$ :<nanoarrow_buffer_validity[0 b] at 0x0> #>  $ children  :List of 1 #>   ..$ col1:<nanoarrow_array g[2]> #>   .. ..$ length    : int 2 #>   .. ..$ null_count: int 0 #>   .. ..$ offset    : int 0 #>   .. ..$ buffers   :List of 2 #>   .. .. ..$ :<nanoarrow_buffer_validity[0 b] at 0x0> #>   .. .. ..$ :<nanoarrow_buffer_data_double[16 b] at 0x1195920f8> #>   .. ..$ dictionary: NULL #>   .. ..$ children  : list() #>  $ dictionary: NULL stream$get_next() #> NULL"},{"path":"/reference/as_nanoarrow_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to a nanoarrow array — as_nanoarrow_array","title":"Convert an object to a nanoarrow array — as_nanoarrow_array","text":"nanoarrow 'array' refers struct ArrowArray definition Arrow C data interface. R level, attach schema functionally nanoarrow_array class can used similar way arrow::Array. Note nanoarrow arrow::RecordBatch non-nullable arrow::StructArray represented identically.","code":""},{"path":"/reference/as_nanoarrow_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to a nanoarrow array — as_nanoarrow_array","text":"","code":"as_nanoarrow_array(x, ..., schema = NULL)"},{"path":"/reference/as_nanoarrow_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to a nanoarrow array — as_nanoarrow_array","text":"x object convert array ... Passed S3 methods schema optional schema used enforce conversion particular type. Defaults infer_nanoarrow_schema().","code":""},{"path":"/reference/as_nanoarrow_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object to a nanoarrow array — as_nanoarrow_array","text":"object class 'nanoarrow_array'","code":""},{"path":"/reference/as_nanoarrow_array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an object to a nanoarrow array — as_nanoarrow_array","text":"","code":"(array <- as_nanoarrow_array(1:5)) #> <nanoarrow_array i[5]> #>  $ length    : int 5 #>  $ null_count: int 0 #>  $ offset    : int 0 #>  $ buffers   :List of 2 #>   ..$ :<nanoarrow_buffer_validity[0 b] at (nil)> #>   ..$ :<nanoarrow_buffer_data_int32[20 b] at 0x5622b3193558> #>  $ dictionary: NULL #>  $ children  : list() as.vector(array) #> [1] 1 2 3 4 5  (array <- as_nanoarrow_array(data.frame(x = 1:5))) #> <nanoarrow_array +s[5]> #>  $ length    : int 5 #>  $ null_count: int 0 #>  $ offset    : int 0 #>  $ buffers   :List of 1 #>   ..$ :<nanoarrow_buffer_validity[0 b] at (nil)> #>  $ children  :List of 1 #>   ..$ x:<nanoarrow_array i[5]> #>   .. ..$ length    : int 5 #>   .. ..$ null_count: int 0 #>   .. ..$ offset    : int 0 #>   .. ..$ buffers   :List of 2 #>   .. .. ..$ :<nanoarrow_buffer_validity[0 b] at (nil)> #>   .. .. ..$ :<nanoarrow_buffer_data_int32[20 b] at 0x5622b2c01a08> #>   .. ..$ dictionary: NULL #>   .. ..$ children  : list() #>  $ dictionary: NULL as.data.frame(array) #>   x #> 1 1 #> 2 2 #> 3 3 #> 4 4 #> 5 5"},{"path":"/reference/as_nanoarrow_array_stream.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to a nanoarrow array_stream — as_nanoarrow_array_stream","title":"Convert an object to a nanoarrow array_stream — as_nanoarrow_array_stream","text":"nanoarrow, 'array stream' corresponds struct ArrowArrayStream defined Arrow C Stream interface. object used represent stream arrays common schema. similar arrow::RecordBatchReader except can used represent stream type (just record batches). Note stream record batches stream non-nullable struct arrays represented identically. Also note array streams mutable objects passed reference value.","code":""},{"path":"/reference/as_nanoarrow_array_stream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to a nanoarrow array_stream — as_nanoarrow_array_stream","text":"","code":"as_nanoarrow_array_stream(x, ..., schema = NULL)"},{"path":"/reference/as_nanoarrow_array_stream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to a nanoarrow array_stream — as_nanoarrow_array_stream","text":"x object convert array_stream ... Passed S3 methods schema optional schema used enforce conversion particular type. Defaults infer_nanoarrow_schema().","code":""},{"path":"/reference/as_nanoarrow_array_stream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object to a nanoarrow array_stream — as_nanoarrow_array_stream","text":"object class 'nanoarrow_array_stream'","code":""},{"path":"/reference/as_nanoarrow_array_stream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an object to a nanoarrow array_stream — as_nanoarrow_array_stream","text":"","code":"(stream <- as_nanoarrow_array_stream(data.frame(x = 1:5))) #> <nanoarrow_array_stream[+s]> #>  $ get_schema:function ()   #>  $ get_next  :function (schema = x$get_schema(), validate = TRUE)   #>  $ release   :function ()   stream$get_schema() #> <nanoarrow_schema[+s]> #>  $ format    : chr \"+s\" #>  $ name      : chr \"\" #>  $ metadata  :List of 1 #>   ..$ r: chr \"A\\n3\\n262657\\n197888\\n5\\nUTF-8\\n531\\n2\\n531\\n1\\n16\\n1\\n262153\\n10\\ndata.frame\\n1026\\n1\\n262153\\n5\\nnames\\n16\\n1\"| __truncated__ #>  $ flags     : int 0 #>  $ children  :List of 1 #>   ..$ x:<nanoarrow_schema[i]> #>   .. ..$ format    : chr \"i\" #>   .. ..$ name      : chr \"x\" #>   .. ..$ metadata  : list() #>   .. ..$ flags     : int 2 #>   .. ..$ children  : NULL #>   .. ..$ dictionary: NULL #>  $ dictionary: NULL stream$get_next() #> <nanoarrow_array +s[5]> #>  $ length    : int 5 #>  $ null_count: int 0 #>  $ offset    : int 0 #>  $ buffers   :List of 1 #>   ..$ :<nanoarrow_buffer_validity[0 b] at (nil)> #>  $ children  :List of 1 #>   ..$ x:<nanoarrow_array i[5]> #>   .. ..$ length    : int 5 #>   .. ..$ null_count: int 0 #>   .. ..$ offset    : int 0 #>   .. ..$ buffers   :List of 2 #>   .. .. ..$ :<nanoarrow_buffer_validity[0 b] at (nil)> #>   .. .. ..$ :<nanoarrow_buffer_data_int32[20 b] at 0x5622b22f03f8> #>   .. ..$ dictionary: NULL #>   .. ..$ children  : list() #>  $ dictionary: NULL  # The last batch is returned as NULL stream$get_next() #> NULL  # Release the stream stream$release()"},{"path":"/reference/as_nanoarrow_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to a nanoarrow schema — as_nanoarrow_schema","title":"Convert an object to a nanoarrow schema — as_nanoarrow_schema","text":"nanoarrow 'schema' refers struct ArrowSchema defined Arrow C Data interface. data structure can used represent arrow::schema(), arrow::field(), arrow::DataType. Note nanoarrow, arrow::schema() non-nullable arrow::struct() represented identically.","code":""},{"path":"/reference/as_nanoarrow_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to a nanoarrow schema — as_nanoarrow_schema","text":"","code":"as_nanoarrow_schema(x, ...)  infer_nanoarrow_schema(x, ...)"},{"path":"/reference/as_nanoarrow_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to a nanoarrow schema — as_nanoarrow_schema","text":"x object convert schema ... Passed S3 methods","code":""},{"path":"/reference/as_nanoarrow_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object to a nanoarrow schema — as_nanoarrow_schema","text":"object class 'nanoarrow_schema'","code":""},{"path":"/reference/as_nanoarrow_schema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an object to a nanoarrow schema — as_nanoarrow_schema","text":"","code":"infer_nanoarrow_schema(integer()) #> <nanoarrow_schema[i]> #>  $ format    : chr \"i\" #>  $ name      : chr \"\" #>  $ metadata  : list() #>  $ flags     : int 2 #>  $ children  : NULL #>  $ dictionary: NULL infer_nanoarrow_schema(data.frame(x = integer())) #> <nanoarrow_schema[+s]> #>  $ format    : chr \"+s\" #>  $ name      : chr \"\" #>  $ metadata  : list() #>  $ flags     : int 2 #>  $ children  :List of 1 #>   ..$ x:<nanoarrow_schema[i]> #>   .. ..$ format    : chr \"i\" #>   .. ..$ name      : chr \"x\" #>   .. ..$ metadata  : list() #>   .. ..$ flags     : int 2 #>   .. ..$ children  : NULL #>   .. ..$ dictionary: NULL #>  $ dictionary: NULL"},{"path":"/reference/from_nanoarrow_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an Array to an R vector — from_nanoarrow_array","title":"Convert an Array to an R vector — from_nanoarrow_array","text":"Convert Array R vector","code":""},{"path":"/reference/from_nanoarrow_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an Array to an R vector — from_nanoarrow_array","text":"","code":"from_nanoarrow_array(array, to = NULL, ...)  infer_nanoarrow_ptype(array)"},{"path":"/reference/from_nanoarrow_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an Array to an R vector — from_nanoarrow_array","text":"array nanoarrow_array. target prototype object describing type array converted, NULL use default conversion. ... Passed S3 methods","code":""},{"path":"/reference/from_nanoarrow_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an Array to an R vector — from_nanoarrow_array","text":"R vector type .","code":""},{"path":"/reference/nanoarrow-package.html","id":null,"dir":"Reference","previous_headings":"","what":"nanoarrow: An R Interface to the 'nanoarrow' C Library — nanoarrow-package","title":"nanoarrow: An R Interface to the 'nanoarrow' C Library — nanoarrow-package","text":"Provides R interface 'nanoarrow' C library 'Apache Arrow' application binary interface. Functions import export 'ArrowArray', 'ArrowSchema', 'ArrowArrayStream' C structures R objects provided alongside helpers facilitate zero-copy data transfer among R bindings libraries implementing 'Arrow' C data interface.","code":""},{"path":[]},{"path":"/reference/nanoarrow-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nanoarrow: An R Interface to the 'nanoarrow' C Library — nanoarrow-package","text":"Maintainer: Dewey Dunnington dewey@dunnington.ca (ORCID) Authors: Apache Arrow dev@arrow.apache.org [copyright holder]","code":""},{"path":"/reference/nanoarrow_build_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Underlying 'nanoarrow' C library build — nanoarrow_build_id","title":"Underlying 'nanoarrow' C library build — nanoarrow_build_id","text":"Underlying 'nanoarrow' C library build","code":""},{"path":"/reference/nanoarrow_build_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Underlying 'nanoarrow' C library build — nanoarrow_build_id","text":"","code":"nanoarrow_build_id(runtime = TRUE)"},{"path":"/reference/nanoarrow_build_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Underlying 'nanoarrow' C library build — nanoarrow_build_id","text":"runtime Compare TRUE FALSE values detect possible ABI mismatch.","code":""},{"path":"/reference/nanoarrow_build_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Underlying 'nanoarrow' C library build — nanoarrow_build_id","text":"string identifying version nanoarrow package compiled .","code":""},{"path":"/reference/nanoarrow_build_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Underlying 'nanoarrow' C library build — nanoarrow_build_id","text":"","code":"nanoarrow_build_id() #> [1] \"nGIio54zo6\""},{"path":"/reference/nanoarrow_pointer_is_valid.html","id":null,"dir":"Reference","previous_headings":"","what":"Danger zone: low-level pointer operations — nanoarrow_pointer_is_valid","title":"Danger zone: low-level pointer operations — nanoarrow_pointer_is_valid","text":"nanoarrow_schema, nanoarrow_array, nanoarrow_array_stream classes represented R external pointers (EXTPTRSXP). objects go scope (.e., garbage collected shortly thereafter), underlying object's release() callback called underlying pointer non-null release() callback non-null.","code":""},{"path":"/reference/nanoarrow_pointer_is_valid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Danger zone: low-level pointer operations — nanoarrow_pointer_is_valid","text":"","code":"nanoarrow_pointer_is_valid(ptr)  nanoarrow_pointer_addr_dbl(ptr)  nanoarrow_pointer_addr_chr(ptr)  nanoarrow_pointer_addr_pretty(ptr)  nanoarrow_pointer_release(ptr)  nanoarrow_pointer_move(ptr_src, ptr_dst)  nanoarrow_pointer_export(ptr_src, ptr_dst)  nanoarrow_allocate_schema()  nanoarrow_allocate_array()  nanoarrow_allocate_array_stream()"},{"path":"/reference/nanoarrow_pointer_is_valid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Danger zone: low-level pointer operations — nanoarrow_pointer_is_valid","text":"ptr, ptr_src, ptr_dst external pointer struct ArrowSchema, struct ArrowArray, struct ArrowArrayStream.","code":""},{"path":"/reference/nanoarrow_pointer_is_valid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Danger zone: low-level pointer operations — nanoarrow_pointer_is_valid","text":"interacting C Data Interface implementations, important keep mind R object wrapping pointers always passed reference (external pointer) may referred another R object (e.g., element list() variable assigned user's environment). importing schema, array, array stream nanoarrow problem: R object takes ownership lifecycle memory released R object garbage collected. case, one can use nanoarrow_pointer_move() ptr_dst created using nanoarrow_allocate_*(). case exporting complicated dedicated function, nanoarrow_pointer_export(), implements different logic schemas, arrays, array streams: Schema objects (deep) copied fresh copy schema exported made responsibility C data interface implementation. Array objects exported shell around original array preserves reference R object. ensures buffers children pointed array copied references original array invalidated. Array stream objects moved: responsibility object transferred C data interface implementation references original R object invalidated. objects mutable, typically want (.e., pulling arrays stream accidentally two places). know lifecycle object (.e., created R object never passed references elsewhere), can slightly efficiently call nanoarrow_pointer_move() three pointer types.","code":""}]
